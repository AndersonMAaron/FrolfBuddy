/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main.gui;

import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import manager.Manager;
import frolf.Course;
import frolf.Hole;
import frolf.Scorecard;
import frolf.Scorecard.ScorecardSummary;

/**
 *
 * @author Aaron Anderson
 */
public class PlayRound extends javax.swing.JFrame {
	private Course currentCourse;
	
    /**
     * Creates new form DiscView
     */
    public PlayRound() {
        initComponents();
        currentCourse = null;
    }
    
    private void scoreRound() {
    	HashMap<String, ArrayList<Integer>> theScores
        	= new HashMap<String, ArrayList<Integer>>();
    	ArrayList<Integer> pars = new ArrayList<Integer>();
    	ArrayList<Integer> score = new ArrayList<Integer>();
    	
    	for (int column = 1; column < tblScorecard.getColumnCount(); column++) {

            score = new ArrayList<Integer>();
            //TODO error guard
            for (int row = 0; row < currentCourse.getNumberOfHoles(); row++) {
                Object obj = tblScorecard.getModel().getValueAt(row, column);
                int cell = 0;
                if (obj instanceof Integer) { cell = (int) obj; }
                else { cell = Integer.parseInt((String) obj); }

                if (column == 1) { pars.add(cell); }
                else { score.add(cell); }
            }

            String username = tblScorecard.getColumnName(column);

            if (column != 1) { theScores.put(username, score); }
        }

        Scorecard scorecard = new Scorecard(
                currentCourse.getName(),
                theScores,
                pars
        );
        
        HashMap<String, ScorecardSummary> summaries = scorecard.getSummaries();
        for (String player : summaries.keySet()) {
        	if (Manager.getInstance().getProfiles().containsKey(player)) {
        		Manager.getInstance().getProfiles().get(player).updateFromScorecard(summaries.get(player));
        		System.out.println(Manager.getInstance().getProfiles().get(player).getProfileSummary());
        	} else {
        		int reply = 
    				JOptionPane.showConfirmDialog(
    					null, 
    					"No profile was found for " + player + ", would you like to create one?", 
    					"Profile not found", 
    					JOptionPane.YES_NO_OPTION);
        		if (reply == JOptionPane.YES_OPTION) {
        			java.awt.EventQueue.invokeLater(new Runnable() {
        	            public void run() {
        	                new NewProfile().setVisible(true);
        	            }
        	        });
        		}
        		
        	}
        }
        
        // TODO do not clear scorecard if a new profile is being created
        clearScorecard();
    }
    
    private void loadCourse(Course course) {
        // Clear scorecard
        clearScorecard();
        // Add par values to scorecard
        for (int holeNumber = 0; holeNumber < course.getNumberOfHoles(); holeNumber++) {
            Hole hole = course.getHole(holeNumber + 1); // +1 to match human #
            tblScorecard.setValueAt(hole.getPar(), holeNumber, 1);
        }
    }
    
    public void clearScorecard() {
        for (int column = 1; column < 4; column++){
            for (int row = 0; row < 18; row++)
            tblScorecard.setValueAt("", row, column);
        }
    }
    
    public void updateColumnTitle(int index, String title) {
    	JTableHeader th = tblScorecard.getTableHeader();
    	TableColumnModel tcm = th.getColumnModel();
    	TableColumn tc = tcm.getColumn(index);
    	tc.setHeaderValue(title);
    	th.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pScorecard = new javax.swing.JPanel();
        spScorecard = new javax.swing.JScrollPane();
        tblScorecard = new javax.swing.JTable();
        mbMenu = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miLoadCourse = new javax.swing.JMenuItem();
        miFinishRound = new javax.swing.JMenuItem();
        miHoleMode = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        miChangePlayers = new javax.swing.JMenuItem();
        miClear = new javax.swing.JMenuItem();
        miSelPlayer1 = new javax.swing.JMenuItem();
        miSelPlayer2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        tblScorecard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null},
                {"2", null, null, null},
                {"3", null, null, null},
                {"4", null, null, null},
                {"5", null, null, null},
                {"6", null, null, null},
                {"7", null, null, null},
                {"8", null, null, null},
                {"9", null, null, null},
                {"10", null, null, null},
                {"11", null, null, null},
                {"12", null, null, null},
                {"13", null, null, null},
                {"14", null, null, null},
                {"15", null, null, null},
                {"16", null, null, null},
                {"17", null, null, null},
                {"18", null, null, null}
            },
            new String [] {
                "Hole #", "Par", "Player 1", "Player 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spScorecard.setViewportView(tblScorecard);

        javax.swing.GroupLayout pScorecardLayout = new javax.swing.GroupLayout(pScorecard);
        pScorecard.setLayout(pScorecardLayout);
        pScorecardLayout.setHorizontalGroup(
            pScorecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pScorecardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spScorecard)
                .addContainerGap())
        );
        pScorecardLayout.setVerticalGroup(
            pScorecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pScorecardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spScorecard, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );

        mFile.setText("File");

        miLoadCourse.setText("Load Course");
        miLoadCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miLoadCourseMousePressed(evt);
            }
        });
        mFile.add(miLoadCourse);

        miFinishRound.setText("Finish Round");
        miFinishRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFinishRoundActionPerformed(evt);
            }
        });
        mFile.add(miFinishRound);

        miHoleMode.setText("Hole-by-hole Mode");
        miHoleMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miHoleModeMousePressed(evt);
            }
        });
        mFile.add(miHoleMode);

        mbMenu.add(mFile);

        mEdit.setText("Edit");

        miChangePlayers.setText("Change # Players");
        miChangePlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miChangePlayersMousePressed(evt);
            }
        });
        mEdit.add(miChangePlayers);

        miClear.setText("Clear Scores");
        miClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miClearMousePressed(evt);
            }
        });
        mEdit.add(miClear);

        miSelPlayer1.setText("Select Player 1");
        miSelPlayer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miSelPlayer1MousePressed(evt);
            }
        });
        mEdit.add(miSelPlayer1);

        miSelPlayer2.setText("Select Player 2");
        miSelPlayer2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                miSelPlayer2MousePressed(evt);
            }
        });
        mEdit.add(miSelPlayer2);

        mbMenu.add(mEdit);

        setJMenuBar(mbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pScorecard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pScorecard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miFinishRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFinishRoundActionPerformed
        scoreRound();
    }

    private void miLoadCourseMousePressed(java.awt.event.MouseEvent evt) {
    	Object[] courseNames = Manager.getInstance().getCourseNames().toArray();
    	String selectedCourse = (String) JOptionPane.showInputDialog(this, 
    	        "Select a course.",
    	        "Course Select",
    	        JOptionPane.QUESTION_MESSAGE, 
    	        null, 
    	        courseNames, 
    	        courseNames[0]);
    	
    	if (selectedCourse == null) { return; }
    	currentCourse = Manager.getInstance().getCourses().get(selectedCourse); 
    	loadCourse(Manager.getInstance().getCourses().get(selectedCourse));
    }

    private void miHoleModeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miHoleModeMousePressed
        JOptionPane.showMessageDialog(null, "This feature has not yet been implemented.");
    }

    private void miChangePlayersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miChangePlayersMousePressed
        JOptionPane.showMessageDialog(null, "This feature has not yet been implemented.");
    }

    private void miClearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miClearMousePressed
        clearScorecard();
    }

    private void miSelPlayer1MousePressed(java.awt.event.MouseEvent evt) {
    	Object[] profileNames = Manager.getInstance().getProfileNames().toArray();
    	String selectedProfile = (String) JOptionPane.showInputDialog(this, 
    	        "Select a player.",
    	        "Profile Select",
    	        JOptionPane.QUESTION_MESSAGE, 
    	        null, 
    	        profileNames, 
    	        profileNames[0]);
    	
    	if (selectedProfile == null) { return; }
    	
    	updateColumnTitle(2, selectedProfile);
    }

    private void miSelPlayer2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miSelPlayer2MousePressed
    	Object[] profileNames = Manager.getInstance().getProfileNames().toArray();
    	String selectedProfile = (String) JOptionPane.showInputDialog(this, 
    	        "Select a player.",
    	        "Profile Select",
    	        JOptionPane.QUESTION_MESSAGE, 
    	        null, 
    	        profileNames, 
    	        profileNames[0]);
    	
    	if (selectedProfile == null) { return; }
    	
    	updateColumnTitle(3, selectedProfile);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayRound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayRound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayRound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayRound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayRound().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuBar mbMenu;
    private javax.swing.JMenuItem miChangePlayers;
    private javax.swing.JMenuItem miClear;
    private javax.swing.JMenuItem miFinishRound;
    private javax.swing.JMenuItem miHoleMode;
    private javax.swing.JMenuItem miLoadCourse;
    private javax.swing.JMenuItem miSelPlayer1;
    private javax.swing.JMenuItem miSelPlayer2;
    private javax.swing.JPanel pScorecard;
    private javax.swing.JScrollPane spScorecard;
    private javax.swing.JTable tblScorecard;
    // End of variables declaration//GEN-END:variables
}
